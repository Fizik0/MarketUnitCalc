import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from streamlit_option_menu import option_menu
import json
from datetime import datetime
import os

# Import custom modules
from utils.calculations import UnitEconomicsCalculator
from utils.data_models import MarketplaceData, BusinessMetrics
from utils.export import ExportManager
from data.marketplace_data import MARKETPLACE_COMMISSIONS, BENCHMARKS

# Configure page
st.set_page_config(
    page_title="–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –Æ–Ω–∏—Ç-–≠–∫–æ–Ω–æ–º–∏–∫–∏ –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Initialize session state
if 'calculator_data' not in st.session_state:
    st.session_state.calculator_data = {}
if 'current_step' not in st.session_state:
    st.session_state.current_step = 1
if 'completed_steps' not in st.session_state:
    st.session_state.completed_steps = set()

def main():
    st.title("üéØ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –Æ–Ω–∏—Ç-–≠–∫–æ–Ω–æ–º–∏–∫–∏ –¥–ª—è –†–æ—Å—Å–∏–π—Å–∫–∏—Ö –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤")
    st.markdown("### –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ä–µ–∞–ª—å–Ω–æ–π –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏ –±–∏–∑–Ω–µ—Å–∞")
    
    # Navigation menu
    selected = option_menu(
        menu_title=None,
        options=["–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", "–î–∞—à–±–æ—Ä–¥", "–ú–µ—Ç–æ–¥–æ–ª–æ–≥–∏—è", "–≠–∫—Å–ø–æ—Ä—Ç"],
        icons=["calculator", "graph-up", "book", "download"],
        menu_icon="cast",
        default_index=0,
        orientation="horizontal",
        styles={
            "container": {"padding": "0!important", "background-color": "#fafafa"},
            "icon": {"color": "#FF6B6B", "font-size": "18px"},
            "nav-link": {
                "font-size": "16px",
                "text-align": "center",
                "margin": "0px",
                "--hover-color": "#eee",
            },
            "nav-link-selected": {"background-color": "#FF6B6B"},
        },
    )
    
    if selected == "–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä":
        calculator_page()
    elif selected == "–î–∞—à–±–æ—Ä–¥":
        dashboard_page()
    elif selected == "–ú–µ—Ç–æ–¥–æ–ª–æ–≥–∏—è":
        methodology_page()
    elif selected == "–≠–∫—Å–ø–æ—Ä—Ç":
        export_page()

def calculator_page():
    st.header("üìã 10-—ç—Ç–∞–ø–Ω—ã–π —Ä–∞—Å—á–µ—Ç —é–Ω–∏—Ç-—ç–∫–æ–Ω–æ–º–∏–∫–∏")
    
    # Progress bar
    progress = (st.session_state.current_step - 1) / 10
    st.progress(progress)
    st.write(f"–≠—Ç–∞–ø {st.session_state.current_step} –∏–∑ 10")
    
    # Step navigation
    col1, col2, col3 = st.columns([1, 3, 1])
    
    with col1:
        if st.button("‚Üê –ù–∞–∑–∞–¥", disabled=st.session_state.current_step == 1):
            st.session_state.current_step = max(1, st.session_state.current_step - 1)
            st.rerun()
    
    with col3:
        if st.button("–î–∞–ª–µ–µ ‚Üí", disabled=st.session_state.current_step == 10):
            if validate_current_step():
                st.session_state.completed_steps.add(st.session_state.current_step)
                st.session_state.current_step = min(10, st.session_state.current_step + 1)
                st.rerun()
    
    # Current step content
    if st.session_state.current_step == 1:
        step_1_marketplace_selection()
    elif st.session_state.current_step == 2:
        step_2_product_info()
    elif st.session_state.current_step == 3:
        step_3_cost_structure()
    elif st.session_state.current_step == 4:
        step_4_marketplace_costs()
    elif st.session_state.current_step == 5:
        step_5_marketing_costs()
    elif st.session_state.current_step == 6:
        step_6_operational_costs()
    elif st.session_state.current_step == 7:
        step_7_ltv_cac_analysis()
    elif st.session_state.current_step == 8:
        step_8_profit_analysis()
    elif st.session_state.current_step == 9:
        step_9_scenario_planning()
    elif st.session_state.current_step == 10:
        step_10_recommendations()

def step_1_marketplace_selection():
    st.subheader("üõí –≠—Ç–∞–ø 1: –í—ã–±–æ—Ä –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
    
    col1, col2 = st.columns(2)
    
    with col1:
        marketplace = st.selectbox(
            "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å:",
            ["OZON", "Wildberries", "–Ø–Ω–¥–µ–∫—Å.–ú–∞—Ä–∫–µ—Ç", "–ê–≤–∏—Ç–æ", "–î—Ä—É–≥–æ–π"],
            key="marketplace"
        )
        
        if marketplace in MARKETPLACE_COMMISSIONS:
            categories = list(MARKETPLACE_COMMISSIONS[marketplace].keys())
            category = st.selectbox(
                "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞:",
                categories,
                key="category"
            )
        else:
            category = st.text_input("–í–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞:", key="category")
    
    with col2:
        st.info("üí° **–ü–æ—á–µ–º—É —ç—Ç–æ –≤–∞–∂–Ω–æ?**")
        st.write("‚Ä¢ –ö–∞–∂–¥—ã–π –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å –∏–º–µ–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–æ–º–∏—Å—Å–∏–π")
        st.write("‚Ä¢ –ê–ª–≥–æ—Ä–∏—Ç–º—ã —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–∑–ª–∏—á–∞—é—Ç—Å—è")
        st.write("‚Ä¢ –ê—É–¥–∏—Ç–æ—Ä–∏—è –∏ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π –æ—Ç–ª–∏—á–∞—é—Ç—Å—è")
        
        if marketplace == "OZON":
            st.warning("üìä **–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ OZON:**")
            st.write("‚Ä¢ –ö–æ–º–∏—Å—Å–∏—è: 8-45% –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
            st.write("‚Ä¢ –û–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤–∞—è –∫–æ–º–∏—Å—Å–∏—è: 1-3%")
            st.write("‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –û–∑–æ–Ω –ü—Ä–µ–º–∏—É–º –≤–ª–∏—è–µ—Ç –Ω–∞ –∫–æ–Ω–≤–µ—Ä—Å–∏—é")
    
    # Save data
    st.session_state.calculator_data.update({
        'marketplace': marketplace,
        'category': category
    })

def step_2_product_info():
    st.subheader("üì¶ –≠—Ç–∞–ø 2: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ")
    
    col1, col2 = st.columns(2)
    
    with col1:
        product_name = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:", key="product_name")
        selling_price = st.number_input("–¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏ (‚ÇΩ):", min_value=0.0, step=1.0, key="selling_price")
        weight = st.number_input("–í–µ—Å —Ç–æ–≤–∞—Ä–∞ (–∫–≥):", min_value=0.0, step=0.1, key="weight")
        dimensions = st.text_input("–ì–∞–±–∞—Ä–∏—Ç—ã (–î√ó–®√ó–í, —Å–º):", key="dimensions")
    
    with col2:
        st.info("üìä **–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏**")
        
        marketplace = st.session_state.calculator_data.get('marketplace', 'OZON')
        category = st.session_state.calculator_data.get('category', '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞')
        
        if marketplace in BENCHMARKS and category in BENCHMARKS[marketplace]:
            benchmarks = BENCHMARKS[marketplace][category]
            st.metric("–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", f"{benchmarks['avg_price']:,.0f} ‚ÇΩ")
            st.metric("–°—Ä–µ–¥–Ω—è—è –∫–æ–Ω–≤–µ—Ä—Å–∏—è", f"{benchmarks['avg_conversion']:.1%}")
            st.metric("–°—Ä–µ–¥–Ω–∏–π –≤–æ–∑–≤—Ä–∞—Ç", f"{benchmarks['avg_return_rate']:.1%}")
        
        # Price analysis
        if selling_price > 0:
            if marketplace in BENCHMARKS and category in BENCHMARKS[marketplace]:
                avg_price = BENCHMARKS[marketplace][category]['avg_price']
                if selling_price > avg_price * 1.5:
                    st.warning("‚ö†Ô∏è –¶–µ–Ω–∞ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –≤—ã—à–µ —Å—Ä–µ–¥–Ω–µ–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
                elif selling_price < avg_price * 0.7:
                    st.error("üî¥ –¶–µ–Ω–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–æ–π")
                else:
                    st.success("‚úÖ –¶–µ–Ω–∞ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö —Ä—ã–Ω–æ—á–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞")
    
    # Save data
    st.session_state.calculator_data.update({
        'product_name': product_name,
        'selling_price': selling_price,
        'weight': weight,
        'dimensions': dimensions
    })

def step_3_cost_structure():
    st.subheader("üí∞ –≠—Ç–∞–ø 3: –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.write("#### –ü—Ä—è–º—ã–µ –∑–∞—Ç—Ä–∞—Ç—ã")
        purchase_cost = st.number_input("–ó–∞–∫—É–ø–æ—á–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å (‚ÇΩ):", min_value=0.0, step=1.0, key="purchase_cost")
        packaging_cost = st.number_input("–£–ø–∞–∫–æ–≤–∫–∞ (‚ÇΩ):", min_value=0.0, step=1.0, value=25.0, key="packaging_cost")
        labeling_cost = st.number_input("–ú–∞—Ä–∫–∏—Ä–æ–≤–∫–∞/—ç—Ç–∏–∫–µ—Ç–∫–∏ (‚ÇΩ):", min_value=0.0, step=1.0, key="labeling_cost")
        
        st.write("#### –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã")
        quality_control = st.number_input("–ö–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞ (‚ÇΩ):", min_value=0.0, step=1.0, key="quality_control")
        certification = st.number_input("–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è (‚ÇΩ –Ω–∞ –µ–¥–∏–Ω–∏—Ü—É):", min_value=0.0, step=1.0, key="certification")
    
    with col2:
        total_cost = purchase_cost + packaging_cost + labeling_cost + quality_control + certification
        selling_price = st.session_state.calculator_data.get('selling_price', 0)
        
        st.metric("–û–±—â–∞—è —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å", f"{total_cost:,.0f} ‚ÇΩ")
        
        if selling_price > 0:
            gross_margin = ((selling_price - total_cost) / selling_price) * 100
            st.metric("–í–∞–ª–æ–≤–∞—è –º–∞—Ä–∂–∞", f"{gross_margin:.1f}%")
            
            if gross_margin < 30:
                st.error("üî¥ –ù–∏–∑–∫–∞—è –≤–∞–ª–æ–≤–∞—è –º–∞—Ä–∂–∞ (< 30%)")
            elif gross_margin < 50:
                st.warning("‚ö†Ô∏è –£–º–µ—Ä–µ–Ω–Ω–∞—è –≤–∞–ª–æ–≤–∞—è –º–∞—Ä–∂–∞ (30-50%)")
            else:
                st.success("‚úÖ –•–æ—Ä–æ—à–∞—è –≤–∞–ª–æ–≤–∞—è –º–∞—Ä–∂–∞ (> 50%)")
        
        st.info("üí° **–ë–µ–Ω—á–º–∞—Ä–∫–∏ –ø–æ –≤–∞–ª–æ–≤–æ–π –º–∞—Ä–∂–µ:**")
        st.write("‚Ä¢ –≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞: 20-40%")
        st.write("‚Ä¢ –û–¥–µ–∂–¥–∞: 50-70%")
        st.write("‚Ä¢ –¢–æ–≤–∞—Ä—ã –¥–ª—è –¥–æ–º–∞: 40-60%")
        st.write("‚Ä¢ –ö—Ä–∞—Å–æ—Ç–∞ –∏ –∑–¥–æ—Ä–æ–≤—å–µ: 60-80%")
    
    # Save data
    st.session_state.calculator_data.update({
        'purchase_cost': purchase_cost,
        'packaging_cost': packaging_cost,
        'labeling_cost': labeling_cost,
        'quality_control': quality_control,
        'certification': certification,
        'total_cost': total_cost
    })

def step_4_marketplace_costs():
    st.subheader("üè™ –≠—Ç–∞–ø 4: –†–∞—Å—Ö–æ–¥—ã –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞")
    
    marketplace = st.session_state.calculator_data.get('marketplace', 'OZON')
    category = st.session_state.calculator_data.get('category', '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞')
    selling_price = st.session_state.calculator_data.get('selling_price', 0)
    weight = st.session_state.calculator_data.get('weight', 0.5)
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.write("#### –ö–æ–º–∏—Å—Å–∏–∏ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞")
        
        # Get default commission rate
        default_commission = 15.0
        if marketplace in MARKETPLACE_COMMISSIONS and category in MARKETPLACE_COMMISSIONS[marketplace]:
            default_commission = MARKETPLACE_COMMISSIONS[marketplace][category]['commission_rate']
        
        commission_rate = st.slider(
            "–ö–æ–º–∏—Å—Å–∏—è –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞ (%)", 
            min_value=5.0, 
            max_value=50.0, 
            value=default_commission,
            step=0.5,
            key="commission_rate"
        )
        
        fulfillment_cost = st.number_input(
            "–°—Ç–æ–∏–º–æ—Å—Ç—å —Ñ—É–ª—Ñ–∏–ª–º–µ–Ω—Ç–∞ (‚ÇΩ):", 
            min_value=0.0, 
            step=1.0, 
            value=max(50.0, weight * 30),
            key="fulfillment_cost"
        )
        
        storage_days = st.slider("–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —Ö—Ä–∞–Ω–µ–Ω–∏—è (–¥–Ω–µ–π):", min_value=1, max_value=365, value=30, key="storage_days")
        storage_cost_per_day = st.number_input("–°—Ç–æ–∏–º–æ—Å—Ç—å —Ö—Ä–∞–Ω–µ–Ω–∏—è (‚ÇΩ/–¥–µ–Ω—å):", min_value=0.0, step=0.1, value=2.0, key="storage_cost_per_day")
        
        payment_processing = st.slider("–≠–∫–≤–∞–π—Ä–∏–Ω–≥ (%)", min_value=1.0, max_value=5.0, value=2.5, step=0.1, key="payment_processing")
    
    with col2:
        st.write("#### –†–∞—Å—á–µ—Ç –æ–±—â–∏—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤")
        
        commission_amount = selling_price * (commission_rate / 100)
        storage_total = storage_days * storage_cost_per_day
        payment_amount = selling_price * (payment_processing / 100)
        
        st.metric("–ö–æ–º–∏—Å—Å–∏—è –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞", f"{commission_amount:,.0f} ‚ÇΩ")
        st.metric("–§—É–ª—Ñ–∏–ª–º–µ–Ω—Ç", f"{fulfillment_cost:,.0f} ‚ÇΩ")
        st.metric("–•—Ä–∞–Ω–µ–Ω–∏–µ", f"{storage_total:,.0f} ‚ÇΩ")
        st.metric("–≠–∫–≤–∞–π—Ä–∏–Ω–≥", f"{payment_amount:,.0f} ‚ÇΩ")
        
        total_marketplace_costs = commission_amount + fulfillment_cost + storage_total + payment_amount
        st.metric("**–í—Å–µ–≥–æ —Ä–∞—Å—Ö–æ–¥–æ–≤ –ú–ü**", f"{total_marketplace_costs:,.0f} ‚ÇΩ")
        
        if marketplace == "OZON":
            st.warning("‚ö†Ô∏è **–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã OZON:**")
            mandatory_marketing = selling_price * 0.02  # 2% –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤–∞—è –∫–æ–º–∏—Å—Å–∏—è
            st.write(f"‚Ä¢ –û–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤–∞—è –∫–æ–º–∏—Å—Å–∏—è: {mandatory_marketing:,.0f} ‚ÇΩ")
            total_marketplace_costs += mandatory_marketing
        
        # Calculate percentage of selling price
        if selling_price > 0:
            percentage = (total_marketplace_costs / selling_price) * 100
            st.metric("% –æ—Ç —Ü–µ–Ω—ã –ø—Ä–æ–¥–∞–∂–∏", f"{percentage:.1f}%")
    
    # Save data
    st.session_state.calculator_data.update({
        'commission_rate': commission_rate,
        'commission_amount': commission_amount,
        'fulfillment_cost': fulfillment_cost,
        'storage_days': storage_days,
        'storage_total': storage_total,
        'payment_processing': payment_processing,
        'payment_amount': payment_amount,
        'total_marketplace_costs': total_marketplace_costs
    })

def step_5_marketing_costs():
    st.subheader("üìà –≠—Ç–∞–ø 5: –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–µ —Ä–∞—Å—Ö–æ–¥—ã")
    
    selling_price = st.session_state.calculator_data.get('selling_price', 0)
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.write("#### –†–µ–∫–ª–∞–º–∞ –Ω–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–µ")
        
        ppc_budget_percent = st.slider(
            "–ë—é–¥–∂–µ—Ç –Ω–∞ PPC —Ä–µ–∫–ª–∞–º—É (% –æ—Ç –æ–±–æ—Ä–æ—Ç–∞):", 
            min_value=0.0, 
            max_value=50.0, 
            value=15.0, 
            step=1.0,
            key="ppc_budget_percent"
        )
        
        avg_cpc = st.number_input("–°—Ä–µ–¥–Ω–∏–π CPC (‚ÇΩ):", min_value=0.0, step=1.0, value=25.0, key="avg_cpc")
        conversion_rate = st.slider("–ö–æ–Ω–≤–µ—Ä—Å–∏—è —Ä–µ–∫–ª–∞–º—ã (%):", min_value=0.1, max_value=20.0, value=2.5, step=0.1, key="conversion_rate")
        
        st.write("#### –í–Ω–µ—à–Ω–∏–π –º–∞—Ä–∫–µ—Ç–∏–Ω–≥")
        external_marketing = st.number_input("–í–Ω–µ—à–Ω–∏–π –º–∞—Ä–∫–µ—Ç–∏–Ω–≥ (‚ÇΩ –Ω–∞ –µ–¥–∏–Ω–∏—Ü—É):", min_value=0.0, step=1.0, key="external_marketing")
        influencer_marketing = st.number_input("–ò–Ω—Ñ–ª—é–µ–Ω—Å–µ—Ä-–º–∞—Ä–∫–µ—Ç–∏–Ω–≥ (‚ÇΩ –Ω–∞ –µ–¥–∏–Ω–∏—Ü—É):", min_value=0.0, step=1.0, key="influencer_marketing")
        content_creation = st.number_input("–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (‚ÇΩ –Ω–∞ –µ–¥–∏–Ω–∏—Ü—É):", min_value=0.0, step=1.0, value=50.0, key="content_creation")
    
    with col2:
        st.write("#### –ê–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")
        
        ppc_cost_per_unit = selling_price * (ppc_budget_percent / 100)
        cac_ppc = avg_cpc / (conversion_rate / 100) if conversion_rate > 0 else 0
        
        st.metric("PPC —Ä–∞—Å—Ö–æ–¥—ã –Ω–∞ –µ–¥–∏–Ω–∏—Ü—É", f"{ppc_cost_per_unit:,.0f} ‚ÇΩ")
        st.metric("CAC (—Ç–æ–ª—å–∫–æ PPC)", f"{cac_ppc:,.0f} ‚ÇΩ")
        
        total_marketing_costs = ppc_cost_per_unit + external_marketing + influencer_marketing + content_creation
        st.metric("**–û–±—â–∏–µ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–µ —Ä–∞—Å—Ö–æ–¥—ã**", f"{total_marketing_costs:,.0f} ‚ÇΩ")
        
        if selling_price > 0:
            marketing_percentage = (total_marketing_costs / selling_price) * 100
            st.metric("% –æ—Ç —Ü–µ–Ω—ã –ø—Ä–æ–¥–∞–∂–∏", f"{marketing_percentage:.1f}%")
            
            if marketing_percentage > 30:
                st.error("üî¥ –í—ã—Å–æ–∫–∏–µ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–µ —Ä–∞—Å—Ö–æ–¥—ã (>30%)")
            elif marketing_percentage > 20:
                st.warning("‚ö†Ô∏è –£–º–µ—Ä–µ–Ω–Ω—ã–µ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–µ —Ä–∞—Å—Ö–æ–¥—ã (20-30%)")
            else:
                st.success("‚úÖ –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–µ —Ä–∞—Å—Ö–æ–¥—ã (<20%)")
        
        st.info("üí° **–ë–µ–Ω—á–º–∞—Ä–∫–∏ –ø–æ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥—É:**")
        st.write("‚Ä¢ –ù–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç: 20-35% –æ—Ç –æ–±–æ—Ä–æ—Ç–∞")
        st.write("‚Ä¢ –ó—Ä–µ–ª—ã–π –ø—Ä–æ–¥—É–∫—Ç: 10-20% –æ—Ç –æ–±–æ—Ä–æ—Ç–∞")
        st.write("‚Ä¢ –ü—Ä–µ–º–∏—É–º —Å–µ–≥–º–µ–Ω—Ç: 15-25% –æ—Ç –æ–±–æ—Ä–æ—Ç–∞")
    
    # Save data
    st.session_state.calculator_data.update({
        'ppc_budget_percent': ppc_budget_percent,
        'ppc_cost_per_unit': ppc_cost_per_unit,
        'avg_cpc': avg_cpc,
        'conversion_rate': conversion_rate,
        'cac_ppc': cac_ppc,
        'external_marketing': external_marketing,
        'influencer_marketing': influencer_marketing,
        'content_creation': content_creation,
        'total_marketing_costs': total_marketing_costs
    })

def step_6_operational_costs():
    st.subheader("‚öôÔ∏è –≠—Ç–∞–ø 6: –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.write("#### –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã")
        staff_costs = st.number_input("–ó–∞—Ä–ø–ª–∞—Ç–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã (‚ÇΩ/–º–µ—Å—è—Ü):", min_value=0.0, step=1000.0, key="staff_costs")
        office_rent = st.number_input("–ê—Ä–µ–Ω–¥–∞ –æ—Ñ–∏—Å–∞ (‚ÇΩ/–º–µ—Å—è—Ü):", min_value=0.0, step=1000.0, key="office_rent")
        software_subscriptions = st.number_input("–ü–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –ü–û (‚ÇΩ/–º–µ—Å—è—Ü):", min_value=0.0, step=100.0, value=5000.0, key="software_subscriptions")
        
        st.write("#### –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã")
        customer_service = st.number_input("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–æ–≤ (‚ÇΩ –∑–∞ –∑–∞–∫–∞–∑):", min_value=0.0, step=1.0, value=15.0, key="customer_service")
        return_processing = st.slider("–ü—Ä–æ—Ü–µ–Ω—Ç –≤–æ–∑–≤—Ä–∞—Ç–æ–≤ (%):", min_value=0.0, max_value=50.0, value=8.0, step=1.0, key="return_rate")
        return_cost = st.number_input("–°—Ç–æ–∏–º–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ (‚ÇΩ):", min_value=0.0, step=1.0, value=100.0, key="return_cost")
        
        monthly_sales_volume = st.number_input("–ü–ª–∞–Ω–æ–≤—ã–π –æ–±—ä–µ–º –ø—Ä–æ–¥–∞–∂ (—à—Ç/–º–µ—Å—è—Ü):", min_value=1, step=1, value=100, key="monthly_sales_volume")
    
    with col2:
        st.write("#### –†–∞—Å—á–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤ –Ω–∞ –µ–¥–∏–Ω–∏—Ü—É")
        
        # Fixed costs per unit
        total_fixed_monthly = staff_costs + office_rent + software_subscriptions
        fixed_cost_per_unit = total_fixed_monthly / monthly_sales_volume if monthly_sales_volume > 0 else 0
        
        # Variable costs per unit
        return_cost_per_unit = (return_rate / 100) * return_cost
        
        total_operational_costs = fixed_cost_per_unit + customer_service + return_cost_per_unit
        
        st.metric("–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã –Ω–∞ –µ–¥–∏–Ω–∏—Ü—É", f"{fixed_cost_per_unit:,.0f} ‚ÇΩ")
        st.metric("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–∞", f"{customer_service:,.0f} ‚ÇΩ")
        st.metric("–†–∞—Å—Ö–æ–¥—ã –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç—ã", f"{return_cost_per_unit:,.0f} ‚ÇΩ")
        st.metric("**–û–±—â–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã**", f"{total_operational_costs:,.0f} ‚ÇΩ")
        
        selling_price = st.session_state.calculator_data.get('selling_price', 0)
        if selling_price > 0:
            operational_percentage = (total_operational_costs / selling_price) * 100
            st.metric("% –æ—Ç —Ü–µ–Ω—ã –ø—Ä–æ–¥–∞–∂–∏", f"{operational_percentage:.1f}%")
        
        st.info("üí° **–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π:**")
        st.write("‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–æ–≤")
        st.write("‚Ä¢ –£–ª—É—á—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –≤–æ–∑–≤—Ä–∞—Ç–æ–≤")
        st.write("‚Ä¢ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞")
        
        if return_rate > 15:
            st.warning("‚ö†Ô∏è –í—ã—Å–æ–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –≤–æ–∑–≤—Ä–∞—Ç–æ–≤ —Ç—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è")
    
    # Save data
    st.session_state.calculator_data.update({
        'staff_costs': staff_costs,
        'office_rent': office_rent,
        'software_subscriptions': software_subscriptions,
        'customer_service': customer_service,
        'return_rate': return_rate,
        'return_cost': return_cost,
        'monthly_sales_volume': monthly_sales_volume,
        'fixed_cost_per_unit': fixed_cost_per_unit,
        'return_cost_per_unit': return_cost_per_unit,
        'total_operational_costs': total_operational_costs
    })

def step_7_ltv_cac_analysis():
    st.subheader("üë• –≠—Ç–∞–ø 7: –ê–Ω–∞–ª–∏–∑ LTV/CAC")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.write("#### –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–ª–∏–µ–Ω—Ç–æ–≤")
        
        repeat_purchase_rate = st.slider("–ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫ (%):", min_value=0.0, max_value=100.0, value=25.0, step=1.0, key="repeat_purchase_rate")
        avg_purchases_per_year = st.slider("–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∫—É–ø–æ–∫ –≤ –≥–æ–¥:", min_value=0.1, max_value=12.0, value=1.5, step=0.1, key="avg_purchases_per_year")
        customer_lifespan_months = st.slider("–ñ–∏–∑–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª –∫–ª–∏–µ–Ω—Ç–∞ (–º–µ—Å—è—Ü—ã):", min_value=1, max_value=60, value=18, key="customer_lifespan_months")
        
        st.write("#### –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–æ—Ö–æ–¥—ã")
        cross_sell_revenue = st.number_input("–î–æ—Ö–æ–¥ –æ—Ç –∫—Ä–æ—Å—Å-–ø—Ä–æ–¥–∞–∂ (‚ÇΩ –∑–∞ –∫–ª–∏–µ–Ω—Ç–∞):", min_value=0.0, step=10.0, key="cross_sell_revenue")
        referral_bonus = st.number_input("–î–æ—Ö–æ–¥ –æ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ (‚ÇΩ –∑–∞ –∫–ª–∏–µ–Ω—Ç–∞):", min_value=0.0, step=10.0, key="referral_bonus")
    
    with col2:
        st.write("#### –†–∞—Å—á–µ—Ç LTV –∏ CAC")
        
        selling_price = st.session_state.calculator_data.get('selling_price', 0)
        total_marketing_costs = st.session_state.calculator_data.get('total_marketing_costs', 0)
        
        # LTV calculation
        purchases_per_customer = (customer_lifespan_months / 12) * avg_purchases_per_year
        repeat_customers = repeat_purchase_rate / 100
        
        ltv = (selling_price * purchases_per_customer + cross_sell_revenue + referral_bonus)
        
        # CAC calculation (simplified - should include all acquisition costs)
        cac = total_marketing_costs  # This is a simplified version
        
        st.metric("LTV (Customer Lifetime Value)", f"{ltv:,.0f} ‚ÇΩ")
        st.metric("CAC (Customer Acquisition Cost)", f"{cac:,.0f} ‚ÇΩ")
        
        if cac > 0:
            ltv_cac_ratio = ltv / cac
            st.metric("LTV/CAC —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ", f"{ltv_cac_ratio:.1f}")
            
            if ltv_cac_ratio >= 3:
                st.success("‚úÖ –û—Ç–ª–∏—á–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ LTV/CAC (‚â•3)")
            elif ltv_cac_ratio >= 2:
                st.warning("‚ö†Ô∏è –ü—Ä–∏–µ–º–ª–µ–º–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ LTV/CAC (2-3)")
            else:
                st.error("üî¥ –ù–∏–∑–∫–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ LTV/CAC (<2)")
        
        payback_period = cac / (selling_price * avg_purchases_per_year / 12) if selling_price > 0 and avg_purchases_per_year > 0 else 0
        st.metric("–ü–µ—Ä–∏–æ–¥ –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏", f"{payback_period:.1f} –º–µ—Å.")
        
        st.info("üí° **–ë–µ–Ω—á–º–∞—Ä–∫–∏ LTV/CAC:**")
        st.write("‚Ä¢ –û—Ç–ª–∏—á–Ω–æ: >5")
        st.write("‚Ä¢ –•–æ—Ä–æ—à–æ: 3-5")
        st.write("‚Ä¢ –ü—Ä–∏–µ–º–ª–µ–º–æ: 2-3")
        st.write("‚Ä¢ –ü–ª–æ—Ö–æ: <2")
    
    # Save data
    st.session_state.calculator_data.update({
        'repeat_purchase_rate': repeat_purchase_rate,
        'avg_purchases_per_year': avg_purchases_per_year,
        'customer_lifespan_months': customer_lifespan_months,
        'cross_sell_revenue': cross_sell_revenue,
        'referral_bonus': referral_bonus,
        'ltv': ltv,
        'cac': cac,
        'ltv_cac_ratio': ltv_cac_ratio if cac > 0 else 0,
        'payback_period': payback_period
    })

def step_8_profit_analysis():
    st.subheader("üíé –≠—Ç–∞–ø 8: –ê–Ω–∞–ª–∏–∑ –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏")
    
    # Calculate unit economics
    calculator = UnitEconomicsCalculator()
    result = calculator.calculate_unit_economics(st.session_state.calculator_data)
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.write("#### –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞—Ç—Ä–∞—Ç")
        
        # Create breakdown chart
        costs_data = {
            '–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å': result['total_cogs'],
            '–ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å': result['marketplace_costs'],
            '–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥': result['marketing_costs'],
            '–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ': result['operational_costs']
        }
        
        fig_costs = px.pie(
            values=list(costs_data.values()),
            names=list(costs_data.keys()),
            title="–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞—Ç—Ä–∞—Ç –Ω–∞ –µ–¥–∏–Ω–∏—Ü—É —Ç–æ–≤–∞—Ä–∞"
        )
        st.plotly_chart(fig_costs, use_container_width=True)
        
        st.write("#### –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤")
        for cost_type, amount in costs_data.items():
            percentage = (amount / result['selling_price']) * 100 if result['selling_price'] > 0 else 0
            st.write(f"‚Ä¢ {cost_type}: {amount:,.0f} ‚ÇΩ ({percentage:.1f}%)")
    
    with col2:
        st.write("#### –ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏")
        
        st.metric("–¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏", f"{result['selling_price']:,.0f} ‚ÇΩ")
        st.metric("–û–±—â–∏–µ –∑–∞—Ç—Ä–∞—Ç—ã", f"{result['total_costs']:,.0f} ‚ÇΩ")
        st.metric(
            "–ü—Ä–∏–±—ã–ª—å —Å –µ–¥–∏–Ω–∏—Ü—ã", 
            f"{result['unit_profit']:+,.0f} ‚ÇΩ",
            delta=f"{result['profit_margin']:.1f}%"
        )
        
        if result['profit_margin'] >= 20:
            st.success(f"‚úÖ –•–æ—Ä–æ—à–∞—è –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å ({result['profit_margin']:.1f}%)")
        elif result['profit_margin'] >= 10:
            st.warning(f"‚ö†Ô∏è –ù–∏–∑–∫–∞—è –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å ({result['profit_margin']:.1f}%)")
        else:
            st.error(f"üî¥ –£–±—ã—Ç–æ—á–Ω–æ—Å—Ç—å ({result['profit_margin']:.1f}%)")
        
        st.write("#### P.R.O.F.I.T. –ê–Ω–∞–ª–∏–∑")
        profit_score = calculator.calculate_profit_score(result)
        
        st.metric("P.R.O.F.I.T. Score", f"{profit_score}/100")
        
        if profit_score >= 80:
            st.success("üéØ –û—Ç–ª–∏—á–Ω–∞—è –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç—å")
        elif profit_score >= 60:
            st.warning("‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")
        else:
            st.error("üî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã")
        
        breakeven_price = result['total_costs'] / 0.8  # 20% –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –º–∞—Ä–∂–∞
        st.metric("–¢–æ—á–∫–∞ –±–µ–∑—É–±—ã—Ç–æ—á–Ω–æ—Å—Ç–∏", f"{breakeven_price:,.0f} ‚ÇΩ")
    
    # Save results
    st.session_state.calculator_data.update(result)

def step_9_scenario_planning():
    st.subheader("üéØ –≠—Ç–∞–ø 9: –°—Ü–µ–Ω–∞—Ä–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ")
    
    base_data = st.session_state.calculator_data
    calculator = UnitEconomicsCalculator()
    
    # Scenario definitions
    scenarios = {
        '–ü–µ—Å—Å–∏–º–∏—Å—Ç–∏—á–Ω—ã–π': {
            'price_change': -0.15,
            'cost_change': 0.10,
            'volume_change': -0.30,
            'marketing_efficiency': -0.20
        },
        '–†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π': {
            'price_change': 0.00,
            'cost_change': 0.05,
            'volume_change': 0.00,
            'marketing_efficiency': 0.00
        },
        '–û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω—ã–π': {
            'price_change': 0.10,
            'cost_change': -0.05,
            'volume_change': 0.50,
            'marketing_efficiency': 0.25
        }
    }
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.write("#### –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤")
        
        selected_scenario = st.selectbox(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ü–µ–Ω–∞—Ä–∏–π –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:",
            list(scenarios.keys()),
            index=1,
            key="selected_scenario"
        )
        
        scenario_params = scenarios[selected_scenario]
        
        st.write(f"**{selected_scenario} —Å—Ü–µ–Ω–∞—Ä–∏–π:**")
        st.write(f"‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã: {scenario_params['price_change']:+.0%}")
        st.write(f"‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞—Ç—Ä–∞—Ç: {scenario_params['cost_change']:+.0%}")
        st.write(f"‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ–±—ä–µ–º–∞: {scenario_params['volume_change']:+.0%}")
        st.write(f"‚Ä¢ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞: {scenario_params['marketing_efficiency']:+.0%}")
        
        # Custom scenario inputs
        st.write("#### –ö–∞—Å—Ç–æ–º–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π")
        custom_price_change = st.slider("–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã (%):", -50, 50, 0, key="custom_price")
        custom_cost_change = st.slider("–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞—Ç—Ä–∞—Ç (%):", -30, 30, 0, key="custom_cost")
        custom_volume_change = st.slider("–ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ–±—ä–µ–º–∞ (%):", -50, 100, 0, key="custom_volume")
    
    with col2:
        st.write("#### –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤")
        
        # Calculate scenarios
        scenario_results = {}
        for name, params in scenarios.items():
            scenario_data = base_data.copy()
            scenario_data['selling_price'] *= (1 + params['price_change'])
            scenario_data['total_cost'] *= (1 + params['cost_change'])
            scenario_data['monthly_sales_volume'] *= (1 + params['volume_change'])
            
            result = calculator.calculate_unit_economics(scenario_data)
            scenario_results[name] = result
        
        # Create comparison table
        comparison_df = pd.DataFrame({
            name: {
                '–¶–µ–Ω–∞ (‚ÇΩ)': f"{result['selling_price']:,.0f}",
                '–ü—Ä–∏–±—ã–ª—å (‚ÇΩ)': f"{result['unit_profit']:+,.0f}",
                '–ú–∞—Ä–∂–∞ (%)': f"{result['profit_margin']:.1f}%",
                '–ú–µ—Å—è—á–Ω–∞—è –ø—Ä–∏–±—ã–ª—å (‚ÇΩ)': f"{result['unit_profit'] * base_data.get('monthly_sales_volume', 100) * (1 + scenarios[name]['volume_change']):+,.0f}"
            }
            for name, result in scenario_results.items()
        })
        
        st.dataframe(comparison_df)
        
        # Visualization
        fig_scenarios = go.Figure()
        
        for name, result in scenario_results.items():
            fig_scenarios.add_trace(go.Bar(
                name=name,
                x=['–ü—Ä–∏–±—ã–ª—å –Ω–∞ –µ–¥–∏–Ω–∏—Ü—É'],
                y=[result['unit_profit']],
                text=[f"{result['unit_profit']:+,.0f} ‚ÇΩ"],
                textposition='auto'
            ))
        
        fig_scenarios.update_layout(
            title="–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–∏–±—ã–ª–∏ –ø–æ —Å—Ü–µ–Ω–∞—Ä–∏—è–º",
            yaxis_title="–ü—Ä–∏–±—ã–ª—å (‚ÇΩ)",
            showlegend=True
        )
        
        st.plotly_chart(fig_scenarios, use_container_width=True)
    
    # Risk analysis
    st.write("#### –ê–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤")
    
    worst_case = scenario_results['–ü–µ—Å—Å–∏–º–∏—Å—Ç–∏—á–Ω—ã–π']
    best_case = scenario_results['–û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω—ã–π']
    
    col3, col4, col5 = st.columns(3)
    
    with col3:
        st.metric(
            "–•—É–¥—à–∏–π —Å–ª—É—á–∞–π",
            f"{worst_case['unit_profit']:+,.0f} ‚ÇΩ",
            f"{worst_case['profit_margin']:.1f}%"
        )
    
    with col4:
        st.metric(
            "–ë–∞–∑–æ–≤—ã–π —Å–ª—É—á–∞–π",
            f"{scenario_results['–†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π']['unit_profit']:+,.0f} ‚ÇΩ",
            f"{scenario_results['–†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π']['profit_margin']:.1f}%"
        )
    
    with col5:
        st.metric(
            "–õ—É—á—à–∏–π —Å–ª—É—á–∞–π",
            f"{best_case['unit_profit']:+,.0f} ‚ÇΩ",
            f"{best_case['profit_margin']:.1f}%"
        )
    
    # Save scenario data
    st.session_state.calculator_data.update({
        'scenarios': scenario_results,
        'selected_scenario': selected_scenario
    })

def step_10_recommendations():
    st.subheader("üéØ –≠—Ç–∞–ø 10: –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏ –ø–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π")
    
    data = st.session_state.calculator_data
    calculator = UnitEconomicsCalculator()
    recommendations = calculator.generate_recommendations(data)
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.write("#### üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã")
        for issue in recommendations.get('critical_issues', []):
            st.error(f"üî¥ {issue}")
        
        st.write("#### ‚ö†Ô∏è –û–±–ª–∞—Å—Ç–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è")
        for improvement in recommendations.get('improvements', []):
            st.warning(f"‚ö†Ô∏è {improvement}")
        
        st.write("#### ‚úÖ –°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã")
        for strength in recommendations.get('strengths', []):
            st.success(f"‚úÖ {strength}")
    
    with col2:
        st.write("#### üìã –ü–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π")
        
        action_plan = recommendations.get('action_plan', {})
        
        if 'immediate' in action_plan:
            st.write("**–ù–µ–º–µ–¥–ª–µ–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è (1-2 –Ω–µ–¥–µ–ª–∏):**")
            for action in action_plan['immediate']:
                st.write(f"‚Ä¢ {action}")
        
        if 'short_term' in action_plan:
            st.write("**–ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–µ (1-3 –º–µ—Å—è—Ü–∞):**")
            for action in action_plan['short_term']:
                st.write(f"‚Ä¢ {action}")
        
        if 'long_term' in action_plan:
            st.write("**–î–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ (3-12 –º–µ—Å—è—Ü–µ–≤):**")
            for action in action_plan['long_term']:
                st.write(f"‚Ä¢ {action}")
    
    st.write("#### üìä P.R.O.F.I.T. –ú–∞—Ç—Ä–∏—Ü–∞ —Ä–∞–∑–≤–∏—Ç–∏—è")
    
    profit_analysis = recommendations.get('profit_matrix', {})
    
    # Create P.R.O.F.I.T. visualization
    profit_categories = ['Profitability', 'Resource Optimization', 'Operations Excellence', 
                        'Financial Intelligence', 'Intelligence Automation', 'Transformation Strategy']
    profit_scores = [profit_analysis.get(cat, 50) for cat in profit_categories]
    
    fig_profit = go.Figure()
    
    fig_profit.add_trace(go.Scatterpolar(
        r=profit_scores,
        theta=profit_categories,
        fill='toself',
        name='–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ'
    ))
    
    # Add target scores
    target_scores = [85, 80, 75, 80, 70, 75]  # Target benchmarks
    fig_profit.add_trace(go.Scatterpolar(
        r=target_scores,
        theta=profit_categories,
        fill='toself',
        name='–¶–µ–ª–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏',
        opacity=0.3
    ))
    
    fig_profit.update_layout(
        polar=dict(
            radialaxis=dict(
                visible=True,
                range=[0, 100]
            )),
        showlegend=True,
        title="P.R.O.F.I.T. –ê–Ω–∞–ª–∏–∑"
    )
    
    st.plotly_chart(fig_profit, use_container_width=True)
    
    # Final summary
    st.write("#### üìà –ò—Ç–æ–≥–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏")
    
    col3, col4, col5, col6 = st.columns(4)
    
    with col3:
        st.metric(
            "–ü—Ä–∏–±—ã–ª—å –Ω–∞ –µ–¥–∏–Ω–∏—Ü—É",
            f"{data.get('unit_profit', 0):+,.0f} ‚ÇΩ"
        )
    
    with col4:
        st.metric(
            "–ú–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å",
            f"{data.get('profit_margin', 0):.1f}%"
        )
    
    with col5:
        st.metric(
            "LTV/CAC",
            f"{data.get('ltv_cac_ratio', 0):.1f}"
        )
    
    with col6:
        st.metric(
            "P.R.O.F.I.T. Score",
            f"{recommendations.get('total_score', 0)}/100"
        )

def dashboard_page():
    st.header("üìä –î–∞—à–±–æ—Ä–¥ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏")
    
    if not st.session_state.calculator_data:
        st.warning("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Ä–∞—Å—á–µ—Ç –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–µ")
        return
    
    data = st.session_state.calculator_data
    
    # Key metrics overview
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric(
            "–í—ã—Ä—É—á–∫–∞",
            f"{data.get('selling_price', 0):,.0f} ‚ÇΩ",
            help="–¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏ —Ç–æ–≤–∞—Ä–∞"
        )
    
    with col2:
        st.metric(
            "–ó–∞—Ç—Ä–∞—Ç—ã",
            f"{data.get('total_costs', 0):,.0f} ‚ÇΩ",
            help="–û–±—â–∏–µ –∑–∞—Ç—Ä–∞—Ç—ã –Ω–∞ –µ–¥–∏–Ω–∏—Ü—É"
        )
    
    with col3:
        profit_color = "normal" if data.get('unit_profit', 0) >= 0 else "inverse"
        st.metric(
            "–ü—Ä–∏–±—ã–ª—å",
            f"{data.get('unit_profit', 0):+,.0f} ‚ÇΩ",
            f"{data.get('profit_margin', 0):.1f}%"
        )
    
    with col4:
        st.metric(
            "LTV/CAC",
            f"{data.get('ltv_cac_ratio', 0):.1f}",
            help="–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω–æ–π —Ü–µ–Ω–Ω–æ—Å—Ç–∏ –∫–ª–∏–µ–Ω—Ç–∞ –∫ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è"
        )
    
    # Charts section
    col1, col2 = st.columns(2)
    
    with col1:
        # Cost breakdown
        if 'total_cogs' in data:
            costs = {
                '–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å': data.get('total_cogs', 0),
                '–ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å': data.get('marketplace_costs', 0),
                '–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥': data.get('marketing_costs', 0),
                '–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ': data.get('operational_costs', 0)
            }
            
            fig_costs = px.pie(
                values=list(costs.values()),
                names=list(costs.keys()),
                title="–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞—Ç—Ä–∞—Ç"
            )
            st.plotly_chart(fig_costs, use_container_width=True)
    
    with col2:
        # Scenario comparison
        if 'scenarios' in data:
            scenarios = data['scenarios']
            scenario_names = list(scenarios.keys())
            profits = [scenarios[name]['unit_profit'] for name in scenario_names]
            
            fig_scenarios = px.bar(
                x=scenario_names,
                y=profits,
                title="–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤",
                labels={'x': '–°—Ü–µ–Ω–∞—Ä–∏–π', 'y': '–ü—Ä–∏–±—ã–ª—å (‚ÇΩ)'}
            )
            st.plotly_chart(fig_scenarios, use_container_width=True)
    
    # Detailed analysis
    st.subheader("üìã –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑")
    
    # Create analysis table
    if data:
        analysis_data = {
            '–ú–µ—Ç—Ä–∏–∫–∞': [
                '–¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏',
                '–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å',
                '–ö–æ–º–∏—Å—Å–∏—è –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞',
                '–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–µ —Ä–∞—Å—Ö–æ–¥—ã',
                '–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã',
                '–û–±—â–∏–µ –∑–∞—Ç—Ä–∞—Ç—ã',
                '–ü—Ä–∏–±—ã–ª—å —Å –µ–¥–∏–Ω–∏—Ü—ã',
                '–ú–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å',
                'LTV',
                'CAC',
                '–ü–µ—Ä–∏–æ–¥ –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏'
            ],
            '–ó–Ω–∞—á–µ–Ω–∏–µ (‚ÇΩ)': [
                f"{data.get('selling_price', 0):,.0f}",
                f"{data.get('total_cogs', 0):,.0f}",
                f"{data.get('marketplace_costs', 0):,.0f}",
                f"{data.get('marketing_costs', 0):,.0f}",
                f"{data.get('operational_costs', 0):,.0f}",
                f"{data.get('total_costs', 0):,.0f}",
                f"{data.get('unit_profit', 0):+,.0f}",
                f"{data.get('profit_margin', 0):.1f}%",
                f"{data.get('ltv', 0):,.0f}",
                f"{data.get('cac', 0):,.0f}",
                f"{data.get('payback_period', 0):.1f} –º–µ—Å."
            ],
            '–î–æ–ª—è –æ—Ç –≤—ã—Ä—É—á–∫–∏ (%)': [
                "100.0%",
                f"{(data.get('total_cogs', 0) / data.get('selling_price', 1)) * 100:.1f}%",
                f"{(data.get('marketplace_costs', 0) / data.get('selling_price', 1)) * 100:.1f}%",
                f"{(data.get('marketing_costs', 0) / data.get('selling_price', 1)) * 100:.1f}%",
                f"{(data.get('operational_costs', 0) / data.get('selling_price', 1)) * 100:.1f}%",
                f"{(data.get('total_costs', 0) / data.get('selling_price', 1)) * 100:.1f}%",
                f"{data.get('profit_margin', 0):.1f}%",
                "-",
                "-",
                "-",
                "-"
            ]
        }
        
        df_analysis = pd.DataFrame(analysis_data)
        st.dataframe(df_analysis, use_container_width=True)

def methodology_page():
    st.header("üìö –ú–µ—Ç–æ–¥–æ–ª–æ–≥–∏—è —Ä–∞—Å—á–µ—Ç–æ–≤")
    
    st.markdown("""
    ## üéØ –ß—Ç–æ —Ç–∞–∫–æ–µ —é–Ω–∏—Ç-—ç–∫–æ–Ω–æ–º–∏–∫–∞ –Ω–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞—Ö
    
    –Æ–Ω–∏—Ç-—ç–∫–æ–Ω–æ–º–∏–∫–∞ - —ç—Ç–æ –∞–Ω–∞–ª–∏–∑ –ø—Ä–∏–±—ã–ª–∏ –∏ —É–±—ã—Ç–∫–æ–≤ –Ω–∞ —É—Ä–æ–≤–Ω–µ –æ–¥–Ω–æ–π –µ–¥–∏–Ω–∏—Ü—ã —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ –æ–¥–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞. 
    –ù–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞—Ö —ç—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç –ø–æ–Ω–∏–º–∞–Ω–∏–µ —Ç–æ–≥–æ, —Å–∫–æ–ª—å–∫–æ –≤—ã –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç–µ –∏–ª–∏ —Ç–µ—Ä—è–µ—Ç–µ —Å –∫–∞–∂–¥–æ–π –ø—Ä–æ–¥–∞–∂–∏ 
    –ø–æ—Å–ª–µ –≤—ã—á–µ—Ç–∞ –≤—Å–µ—Ö —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤.
    
    ### –ö–ª—é—á–µ–≤–∞—è —Ñ–æ—Ä–º—É–ª–∞:
    