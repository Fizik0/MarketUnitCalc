"""
–ú–æ–¥—É–ª—å –¥–ª—è –ø–æ—à–∞–≥–æ–≤–æ–≥–æ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ —é–Ω–∏—Ç-—ç–∫–æ–Ω–æ–º–∏–∫–∏
"""

import streamlit as st
import plotly.express as px
import plotly.graph_objects as go
from data.marketplace_data import (
    MARKETPLACE_COMMISSIONS, 
    BENCHMARKS, 
    get_marketplace_commission,
    get_category_benchmark
)

def validate_current_step() -> bool:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–∫—É—â–µ–≥–æ —ç—Ç–∞–ø–∞"""
    current_step = st.session_state.current_step
    data = st.session_state.calculator_data
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç—Ç–∞–ø–∞
    if current_step == 1:
        return bool(data.get('marketplace') and data.get('category'))
    elif current_step == 2:
        return bool(data.get('product_name') and data.get('selling_price', 0) > 0)
    elif current_step == 3:
        return data.get('purchase_cost', 0) > 0
    elif current_step == 4:
        return data.get('commission_rate', 0) > 0
    elif current_step == 5:
        return data.get('ppc_budget_percent', 0) >= 0
    elif current_step == 6:
        return data.get('monthly_sales_volume', 0) > 0
    elif current_step == 7:
        return data.get('customer_lifespan_months', 0) > 0
    elif current_step == 8:
        return True  # –≠—Ç–∞–ø —Ä–∞—Å—á–µ—Ç–æ–≤, –≤—Å–µ–≥–¥–∞ –≤–∞–ª–∏–¥–µ–Ω
    elif current_step == 9:
        return True  # –°—Ü–µ–Ω–∞—Ä–∏–∏, –≤—Å–µ–≥–¥–∞ –≤–∞–ª–∏–¥–Ω—ã
    elif current_step == 10:
        return True  # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, –≤—Å–µ–≥–¥–∞ –≤–∞–ª–∏–¥–Ω—ã
    
    return True

def show_step_progress():
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–∞–ø–æ–≤"""
    progress = (st.session_state.current_step - 1) / 10
    st.progress(progress)
    
    # –¶–≤–µ—Ç–æ–≤—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —ç—Ç–∞–ø–æ–≤
    cols = st.columns(10)
    for i in range(10):
        with cols[i]:
            step_num = i + 1
            if step_num in st.session_state.completed_steps:
                st.success(f"‚úÖ {step_num}")
            elif step_num == st.session_state.current_step:
                st.info(f"‚ñ∂Ô∏è {step_num}")
            else:
                st.write(f"‚≠ï {step_num}")

def step_1_marketplace_selection():
    """–≠—Ç–∞–ø 1: –í—ã–±–æ—Ä –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    st.subheader("üõí –≠—Ç–∞–ø 1: –í—ã–±–æ—Ä –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
    
    col1, col2 = st.columns(2)
    
    with col1:
        marketplace = st.selectbox(
            "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å:",
            ["OZON", "Wildberries", "–Ø–Ω–¥–µ–∫—Å.–ú–∞—Ä–∫–µ—Ç", "–ê–≤–∏—Ç–æ", "–î—Ä—É–≥–æ–π"],
            key="marketplace",
            help="–ö–∞–∂–¥—ã–π –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å –∏–º–µ–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–æ–º–∏—Å—Å–∏–π –∏ –∞–ª–≥–æ—Ä–∏—Ç–º—ã —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è"
        )
        
        if marketplace in MARKETPLACE_COMMISSIONS:
            categories = list(MARKETPLACE_COMMISSIONS[marketplace].keys())
            category = st.selectbox(
                "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞:",
                categories,
                key="category",
                help="–ö–æ–º–∏—Å—Å–∏–∏ —Å–∏–ª—å–Ω–æ —Ä–∞–∑–ª–∏—á–∞—é—Ç—Å—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
            )
        else:
            category = st.text_input(
                "–í–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞:", 
                key="category",
                help="–£–∫–∞–∂–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤"
            )
    
    with col2:
        st.info("üí° **–ü–æ—á–µ–º—É —ç—Ç–æ –≤–∞–∂–Ω–æ?**")
        st.write("‚Ä¢ –ö–∞–∂–¥—ã–π –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å –∏–º–µ–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–æ–º–∏—Å—Å–∏–π")
        st.write("‚Ä¢ –ê–ª–≥–æ—Ä–∏—Ç–º—ã —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–∑–ª–∏—á–∞—é—Ç—Å—è")
        st.write("‚Ä¢ –ê—É–¥–∏—Ç–æ—Ä–∏—è –∏ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π –æ—Ç–ª–∏—á–∞—é—Ç—Å—è")
        
        if marketplace == "OZON":
            commission_data = get_marketplace_commission(marketplace, category)
            st.warning("üìä **–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ OZON:**")
            st.write(f"‚Ä¢ –ö–æ–º–∏—Å—Å–∏—è: {commission_data['commission_rate']:.1f}%")
            st.write(f"‚Ä¢ –û–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤–∞—è –∫–æ–º–∏—Å—Å–∏—è: {commission_data.get('mandatory_marketing', 2):.1f}%")
            st.write("‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –û–∑–æ–Ω –ü—Ä–µ–º–∏—É–º –≤–ª–∏—è–µ—Ç –Ω–∞ –∫–æ–Ω–≤–µ—Ä—Å–∏—é")
            st.write("‚Ä¢ –ê–ª–≥–æ—Ä–∏—Ç–º –Ω–∞–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞ —á–∞—Å—Ç—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω")
        elif marketplace == "Wildberries":
            st.success("üìä **–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ Wildberries:**")
            st.write("‚Ä¢ –ë–æ–ª–µ–µ –Ω–∏–∑–∫–∏–µ –∫–æ–º–∏—Å—Å–∏–∏")
            st.write("‚Ä¢ –í—ã—Å–æ–∫–∞—è –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏—è")
            st.write("‚Ä¢ –ë–æ–ª—å—à–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –≤–æ–∑–≤—Ä–∞—Ç–æ–≤ –≤ –æ–¥–µ–∂–¥–µ")
        elif marketplace == "–Ø–Ω–¥–µ–∫—Å.–ú–∞—Ä–∫–µ—Ç":
            st.info("üìä **–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –Ø–Ω–¥–µ–∫—Å.–ú–∞—Ä–∫–µ—Ç:**")
            st.write("‚Ä¢ –°–∞–º—ã–µ –Ω–∏–∑–∫–∏–µ –∫–æ–º–∏—Å—Å–∏–∏")
            st.write("‚Ä¢ –§–æ–∫—É—Å –Ω–∞ –∫–∞—á–µ—Å—Ç–≤–æ –∏ —Å–µ—Ä–≤–∏—Å")
            st.write("‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —ç–∫–æ—Å–∏—Å—Ç–µ–º–æ–π –Ø–Ω–¥–µ–∫—Å–∞")
    
    # –ü–æ–∫–∞–∑–∞—Ç—å –±–µ–Ω—á–º–∞—Ä–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if marketplace in BENCHMARKS and category in BENCHMARKS[marketplace]:
        benchmark = get_category_benchmark(marketplace, category)
        
        st.subheader("üìà –ë–µ–Ω—á–º–∞—Ä–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
        col3, col4, col5, col6 = st.columns(4)
        
        with col3:
            st.metric("–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞", f"{benchmark['avg_price']:,.0f} ‚ÇΩ")
        with col4:
            st.metric("–ö–æ–Ω–≤–µ—Ä—Å–∏—è", f"{benchmark['avg_conversion']:.1%}")
        with col5:
            st.metric("–í–æ–∑–≤—Ä–∞—Ç—ã", f"{benchmark['avg_return_rate']:.1%}")
        with col6:
            st.metric("–ú–∞—Ä–∂–∞", f"{benchmark['avg_margin']:.1%}")
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    st.session_state.calculator_data.update({
        'marketplace': marketplace,
        'category': category
    })

def step_2_product_info():
    """–≠—Ç–∞–ø 2: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ"""
    st.subheader("üì¶ –≠—Ç–∞–ø 2: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ")
    
    col1, col2 = st.columns(2)
    
    with col1:
        product_name = st.text_input(
            "–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:", 
            key="product_name",
            help="–£–∫–∞–∂–∏—Ç–µ —Ç–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤"
        )
        
        selling_price = st.number_input(
            "–¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏ (‚ÇΩ):", 
            min_value=0.0, 
            step=1.0, 
            key="selling_price",
            help="–¶–µ–Ω–∞, –ø–æ –∫–æ—Ç–æ—Ä–æ–π —Ç–æ–≤–∞—Ä –ø—Ä–æ–¥–∞–µ—Ç—Å—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—é"
        )
        
        weight = st.number_input(
            "–í–µ—Å —Ç–æ–≤–∞—Ä–∞ (–∫–≥):", 
            min_value=0.0, 
            step=0.1, 
            key="weight",
            help="–í–ª–∏—è–µ—Ç –Ω–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å –ª–æ–≥–∏—Å—Ç–∏–∫–∏"
        )
        
        dimensions = st.text_input(
            "–ì–∞–±–∞—Ä–∏—Ç—ã (–î√ó–®√ó–í, —Å–º):", 
            key="dimensions",
            help="–ù–∞–ø—Ä–∏–º–µ—Ä: 30√ó20√ó10"
        )
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
        with st.expander("üîß –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏"):
            product_type = st.selectbox(
                "–¢–∏–ø —Ç–æ–≤–∞—Ä–∞:",
                ["–ì–æ—Ç–æ–≤—ã–π —Ç–æ–≤–∞—Ä", "Private Label", "Dropshipping", "Handmade"],
                key="product_type"
            )
            
            target_audience = st.selectbox(
                "–¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è:",
                ["–ú–∞—Å—Å–º–∞—Ä–∫–µ—Ç", "–ü—Ä–µ–º–∏—É–º", "Luxury", "B2B"],
                key="target_audience"
            )
            
            seasonality = st.selectbox(
                "–°–µ–∑–æ–Ω–Ω–æ—Å—Ç—å:",
                ["–ù–µ—Å–µ–∑–æ–Ω–Ω—ã–π", "–í–µ—Å–Ω–∞-–ª–µ—Ç–æ", "–û—Å–µ–Ω—å-–∑–∏–º–∞", "–ù–æ–≤–æ–≥–æ–¥–Ω–∏–π"],
                key="seasonality"
            )
    
    with col2:
        st.info("üìä **–ê–Ω–∞–ª–∏–∑ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏**")
        
        marketplace = st.session_state.calculator_data.get('marketplace', 'OZON')
        category = st.session_state.calculator_data.get('category', '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞')
        
        if marketplace in BENCHMARKS and category in BENCHMARKS[marketplace]:
            benchmarks = BENCHMARKS[marketplace][category]
            
            # –ü–æ–∫–∞–∑–∞—Ç—å –±–µ–Ω—á–º–∞—Ä–∫–∏
            st.metric("–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", f"{benchmarks['avg_price']:,.0f} ‚ÇΩ")
            st.metric("–°—Ä–µ–¥–Ω—è—è –∫–æ–Ω–≤–µ—Ä—Å–∏—è", f"{benchmarks['avg_conversion']:.1%}")
            st.metric("–°—Ä–µ–¥–Ω–∏–π –≤–æ–∑–≤—Ä–∞—Ç", f"{benchmarks['avg_return_rate']:.1%}")
            
            # –ê–Ω–∞–ª–∏–∑ —Ü–µ–Ω—ã
            if selling_price > 0:
                price_ratio = selling_price / benchmarks['avg_price']
                
                if price_ratio > 1.5:
                    st.warning("‚ö†Ô∏è –¶–µ–Ω–∞ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –≤—ã—à–µ —Å—Ä–µ–¥–Ω–µ–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
                    st.write("üí° –£–±–µ–¥–∏—Ç–µ—Å—å –≤ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è")
                elif price_ratio < 0.7:
                    st.error("üî¥ –¶–µ–Ω–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–æ–π")
                    st.write("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞—Å—á–µ—Ç —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏")
                else:
                    st.success("‚úÖ –¶–µ–Ω–∞ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö —Ä—ã–Ω–æ—á–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞")
        
        # –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤
        if weight > 0:
            st.write("#### üì¶ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –ª–æ–≥–∏—Å—Ç–∏–∫–∞")
            
            commission_data = get_marketplace_commission(marketplace, category)
            estimated_fulfillment = commission_data['fulfillment_base']
            
            if weight > 1.0:
                estimated_fulfillment += (weight - 1.0) * 30
            
            st.metric("–û—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω—ã–π —Ñ—É–ª—Ñ–∏–ª–º–µ–Ω—Ç", f"{estimated_fulfillment:.0f} ‚ÇΩ")
            
            # –†–∞—Å—á–µ—Ç –≥–∞–±–∞—Ä–∏—Ç–Ω–æ–≥–æ –≤–µ—Å–∞ –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤
            if dimensions:
                try:
                    dims = [float(x.strip()) for x in dimensions.replace('√ó', 'x').split('x')]
                    if len(dims) == 3:
                        volume_weight = (dims[0] * dims[1] * dims[2]) / 5000  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç
                        actual_weight = max(weight, volume_weight)
                        
                        if actual_weight > weight:
                            st.warning(f"‚ö†Ô∏è –ì–∞–±–∞—Ä–∏—Ç–Ω—ã–π –≤–µ—Å: {actual_weight:.1f} –∫–≥")
                            st.write("–¢–æ–≤–∞—Ä –±—É–¥–µ—Ç —Ç–∞—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø–æ –≥–∞–±–∞—Ä–∏—Ç–Ω–æ–º—É –≤–µ—Å—É")
                except:
                    pass
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    st.session_state.calculator_data.update({
        'product_name': product_name,
        'selling_price': selling_price,
        'weight': weight,
        'dimensions': dimensions,
        'product_type': st.session_state.get('product_type', '–ì–æ—Ç–æ–≤—ã–π —Ç–æ–≤–∞—Ä'),
        'target_audience': st.session_state.get('target_audience', '–ú–∞—Å—Å–º–∞—Ä–∫–µ—Ç'),
        'seasonality': st.session_state.get('seasonality', '–ù–µ—Å–µ–∑–æ–Ω–Ω—ã–π')
    })

def step_3_cost_structure():
    """–≠—Ç–∞–ø 3: –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏"""
    st.subheader("üí∞ –≠—Ç–∞–ø 3: –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.write("#### –ü—Ä—è–º—ã–µ –∑–∞—Ç—Ä–∞—Ç—ã")
        
        purchase_cost = st.number_input(
            "–ó–∞–∫—É–ø–æ—á–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å (‚ÇΩ):", 
            min_value=0.0, 
            step=1.0, 
            key="purchase_cost",
            help="–°—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ –æ—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞"
        )
        
        packaging_cost = st.number_input(
            "–£–ø–∞–∫–æ–≤–∫–∞ (‚ÇΩ):", 
            min_value=0.0, 
            step=1.0, 
            value=25.0, 
            key="packaging_cost",
            help="–ö–æ—Ä–æ–±–∫–∞, –ø–ª–µ–Ω–∫–∞, –∑–∞—â–∏—Ç–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã"
        )
        
        labeling_cost = st.number_input(
            "–ú–∞—Ä–∫–∏—Ä–æ–≤–∫–∞/—ç—Ç–∏–∫–µ—Ç–∫–∏ (‚ÇΩ):", 
            min_value=0.0, 
            step=1.0, 
            key="labeling_cost",
            help="–ß–µ—Å—Ç–Ω—ã–π –ó–ù–ê–ö, —à—Ç—Ä–∏—Ö-–∫–æ–¥—ã, —ç—Ç–∏–∫–µ—Ç–∫–∏"
        )
        
        st.write("#### –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã")
        
        quality_control = st.number_input(
            "–ö–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞ (‚ÇΩ):", 
            min_value=0.0, 
            step=1.0, 
            key="quality_control",
            help="–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–≤–∞—Ä–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π"
        )
        
        certification = st.number_input(
            "–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è (‚ÇΩ –Ω–∞ –µ–¥–∏–Ω–∏—Ü—É):", 
            min_value=0.0, 
            step=1.0, 
            key="certification",
            help="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤"
        )
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ç–æ–≤–∞—Ä–∞
        product_type = st.session_state.calculator_data.get('product_type', '–ì–æ—Ç–æ–≤—ã–π —Ç–æ–≤–∞—Ä')
        
        if product_type == "Private Label":
            st.write("#### Private Label —Ä–∞—Å—Ö–æ–¥—ã")
            
            design_cost = st.number_input(
                "–î–∏–∑–∞–π–Ω –∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ (‚ÇΩ –Ω–∞ –µ–¥–∏–Ω–∏—Ü—É):", 
                min_value=0.0, 
                step=1.0, 
                key="design_cost",
                help="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"
            )
            
            tooling_cost = st.number_input(
                "–û—Å–Ω–∞—Å—Ç–∫–∞ –∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã (‚ÇΩ –Ω–∞ –µ–¥–∏–Ω–∏—Ü—É):", 
                min_value=0.0, 
                step=1.0, 
                key="tooling_cost",
                help="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ—Å–Ω–∞—Å—Ç–∫–∏"
            )
        else:
            design_cost = 0
            tooling_cost = 0
    
    with col2:
        # –†–∞—Å—á–µ—Ç –æ–±—â–µ–π —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏
        total_cost = (purchase_cost + packaging_cost + labeling_cost + 
                     quality_control + certification + design_cost + tooling_cost)
        
        selling_price = st.session_state.calculator_data.get('selling_price', 0)
        
        st.metric("üí∞ –û–±—â–∞—è —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å", f"{total_cost:,.0f} ‚ÇΩ")
        
        if selling_price > 0:
            gross_margin = ((selling_price - total_cost) / selling_price) * 100
            st.metric("üìä –í–∞–ª–æ–≤–∞—è –º–∞—Ä–∂–∞", f"{gross_margin:.1f}%")
            
            # –¶–≤–µ—Ç–æ–≤—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
            margin_container = st.container()
            with margin_container:
                if gross_margin < 30:
                    st.error("üî¥ –ù–∏–∑–∫–∞—è –≤–∞–ª–æ–≤–∞—è –º–∞—Ä–∂–∞ (< 30%)")
                    st.write("üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**")
                    st.write("‚Ä¢ –ü–µ—Ä–µ—Å–º–æ—Ç—Ä–∏—Ç–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤")
                    st.write("‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ —É–ø–∞–∫–æ–≤–∫—É")
                    st.write("‚Ä¢ –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –ø–æ–≤—ã—à–µ–Ω–∏–µ —Ü–µ–Ω—ã")
                elif gross_margin < 50:
                    st.warning("‚ö†Ô∏è –£–º–µ—Ä–µ–Ω–Ω–∞—è –≤–∞–ª–æ–≤–∞—è –º–∞—Ä–∂–∞ (30-50%)")
                    st.write("üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**")
                    st.write("‚Ä¢ –ò—â–∏—Ç–µ —Å–ø–æ—Å–æ–±—ã —Å–Ω–∏–∂–µ–Ω–∏—è COGS")
                    st.write("‚Ä¢ –†–∞–±–æ—Ç–∞–π—Ç–µ –Ω–∞–¥ –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç—å—é")
                else:
                    st.success("‚úÖ –•–æ—Ä–æ—à–∞—è –≤–∞–ª–æ–≤–∞—è –º–∞—Ä–∂–∞ (> 50%)")
                    st.write("üí° **–û—Ç–ª–∏—á–Ω–æ!**")
                    st.write("‚Ä¢ –ï—Å—Ç—å –∑–∞–ø–∞—Å –¥–ª—è –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞")
                    st.write("‚Ä¢ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∫–æ–Ω–∫—É—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ —Ü–µ–Ω–µ")
        
        # –ë–µ–Ω—á–º–∞—Ä–∫–∏ –ø–æ –≤–∞–ª–æ–≤–æ–π –º–∞—Ä–∂–µ
        st.info("üìä **–ë–µ–Ω—á–º–∞—Ä–∫–∏ –ø–æ –≤–∞–ª–æ–≤–æ–π –º–∞—Ä–∂–µ:**")
        category = st.session_state.calculator_data.get('category', '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞')
        
        category_benchmarks = {
            '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞': "20-40%",
            '–û–¥–µ–∂–¥–∞ –∏ –æ–±—É–≤—å': "50-70%",
            '–¢–æ–≤–∞—Ä—ã –¥–ª—è –¥–æ–º–∞': "40-60%",
            '–ö—Ä–∞—Å–æ—Ç–∞ –∏ –∑–¥–æ—Ä–æ–≤—å–µ': "60-80%",
            '–î–µ—Ç—Å–∫–∏–µ —Ç–æ–≤–∞—Ä—ã': "40-65%",
            '–°–ø–æ—Ä—Ç –∏ –æ—Ç–¥—ã—Ö': "35-55%",
            '–ê–≤—Ç–æ—Ç–æ–≤–∞—Ä—ã': "30-50%",
            '–ö–Ω–∏–≥–∏': "40-60%"
        }
        
        benchmark = category_benchmarks.get(category, "30-50%")
        st.write(f"‚Ä¢ {category}: {benchmark}")
        
        # –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∑–∞—Ç—Ä–∞—Ç
        if total_cost > 0:
            st.write("#### üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞—Ç—Ä–∞—Ç")
            
            cost_breakdown = {
                '–ó–∞–∫—É–ø–æ—á–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å': purchase_cost,
                '–£–ø–∞–∫–æ–≤–∫–∞': packaging_cost,
                '–ú–∞—Ä–∫–∏—Ä–æ–≤–∫–∞': labeling_cost,
                '–ö–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞': quality_control,
                '–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è': certification
            }
            
            if product_type == "Private Label":
                cost_breakdown['–î–∏–∑–∞–π–Ω'] = design_cost
                cost_breakdown['–û—Å–Ω–∞—Å—Ç–∫–∞'] = tooling_cost
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –Ω—É–ª–µ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            cost_breakdown = {k: v for k, v in cost_breakdown.items() if v > 0}
            
            if cost_breakdown:
                fig_costs = px.pie(
                    values=list(cost_breakdown.values()),
                    names=list(cost_breakdown.keys()),
                    title="–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏"
                )
                st.plotly_chart(fig_costs, use_container_width=True)
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    st.session_state.calculator_data.update({
        'purchase_cost': purchase_cost,
        'packaging_cost': packaging_cost,
        'labeling_cost': labeling_cost,
        'quality_control': quality_control,
        'certification': certification,
        'design_cost': design_cost,
        'tooling_cost': tooling_cost,
        'total_cost': total_cost
    })

# –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —ç—Ç–∞–ø–æ–≤ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–º –æ–±—Ä–∞–∑–æ–º...
