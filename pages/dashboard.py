"""
–ú–æ–¥—É–ª—å –¥–∞—à–±–æ—Ä–¥–∞ —Å –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–µ–π
"""

import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import numpy as np
from datetime import datetime, timedelta
from utils.calculations import UnitEconomicsCalculator
from data.marketplace_data import BENCHMARKS, get_category_benchmark

def create_dashboard():
    """–°–æ–∑–¥–∞–Ω–∏–µ –¥–∞—à–±–æ—Ä–¥–∞ —Å –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π"""
    st.header("üìä –î–∞—à–±–æ—Ä–¥ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏")
    
    if not st.session_state.calculator_data:
        st.warning("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Ä–∞—Å—á–µ—Ç –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–µ")
        return
    
    data = st.session_state.calculator_data
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    show_key_metrics(data)
    
    # –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
    col1, col2 = st.columns(2)
    
    with col1:
        show_cost_breakdown(data)
        show_profitability_analysis(data)
    
    with col2:
        show_scenario_comparison(data)
        show_benchmark_comparison(data)
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –±–ª–æ–∫–∏
    show_ltv_cac_analysis(data)
    show_profit_matrix(data)
    show_recommendations_summary(data)

def show_key_metrics(data):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫"""
    st.subheader("üéØ –ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏")
    
    col1, col2, col3, col4, col5 = st.columns(5)
    
    with col1:
        st.metric(
            "üí∞ –í—ã—Ä—É—á–∫–∞",
            f"{data.get('selling_price', 0):,.0f} ‚ÇΩ",
            help="–¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏ —Ç–æ–≤–∞—Ä–∞"
        )
    
    with col2:
        st.metric(
            "üí∏ –ó–∞—Ç—Ä–∞—Ç—ã",
            f"{data.get('total_costs', 0):,.0f} ‚ÇΩ",
            help="–û–±—â–∏–µ –∑–∞—Ç—Ä–∞—Ç—ã –Ω–∞ –µ–¥–∏–Ω–∏—Ü—É"
        )
    
    with col3:
        unit_profit = data.get('unit_profit', 0)
        profit_color = "normal" if unit_profit >= 0 else "inverse"
        st.metric(
            "üíé –ü—Ä–∏–±—ã–ª—å",
            f"{unit_profit:+,.0f} ‚ÇΩ",
            f"{data.get('profit_margin', 0):.1f}%"
        )
    
    with col4:
        ltv_cac = data.get('ltv_cac_ratio', 0)
        st.metric(
            "üìà LTV/CAC",
            f"{ltv_cac:.1f}",
            help="–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω–æ–π —Ü–µ–Ω–Ω–æ—Å—Ç–∏ –∫–ª–∏–µ–Ω—Ç–∞ –∫ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è"
        )
    
    with col5:
        profit_score = data.get('profit_score', 0)
        st.metric(
            "üéØ P.R.O.F.I.T.",
            f"{profit_score}/100",
            help="–û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏ –±–∏–∑–Ω–µ—Å–∞"
        )

def show_cost_breakdown(data):
    """–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∑–∞—Ç—Ä–∞—Ç"""
    st.subheader("üí∞ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞—Ç—Ä–∞—Ç")
    
    if 'total_cogs' in data:
        costs = {
            '–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å': data.get('total_cogs', 0),
            '–ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å': data.get('marketplace_costs', 0),
            '–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥': data.get('marketing_costs', 0),
            '–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ': data.get('operational_costs', 0)
        }
        
        # –£–±–∏—Ä–∞–µ–º –Ω—É–ª–µ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        costs = {k: v for k, v in costs.items() if v > 0}
        
        if costs:
            fig_costs = px.pie(
                values=list(costs.values()),
                names=list(costs.keys()),
                title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞—Ç—Ä–∞—Ç",
                color_discrete_sequence=px.colors.qualitative.Set3
            )
            
            fig_costs.update_traces(
                textposition='inside', 
                textinfo='percent+label',
                hovertemplate='<b>%{label}</b><br>–°—É–º–º–∞: %{value:,.0f} ‚ÇΩ<br>–î–æ–ª—è: %{percent}<extra></extra>'
            )
            
            st.plotly_chart(fig_costs, use_container_width=True)
            
            # –¢–∞–±–ª–∏—Ü–∞ —Å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π
            selling_price = data.get('selling_price', 1)
            cost_table = []
            
            for category, amount in costs.items():
                percentage = (amount / selling_price) * 100
                cost_table.append({
                    '–ö–∞—Ç–µ–≥–æ—Ä–∏—è': category,
                    '–°—É–º–º–∞ (‚ÇΩ)': f"{amount:,.0f}",
                    '–î–æ–ª—è –æ—Ç —Ü–µ–Ω—ã (%)': f"{percentage:.1f}%"
                })
            
            df_costs = pd.DataFrame(cost_table)
            st.dataframe(df_costs, use_container_width=True, hide_index=True)

def show_profitability_analysis(data):
    """–ê–Ω–∞–ª–∏–∑ –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏"""
    st.subheader("üìä –ê–Ω–∞–ª–∏–∑ –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏")
    
    selling_price = data.get('selling_price', 0)
    total_costs = data.get('total_costs', 0)
    unit_profit = data.get('unit_profit', 0)
    
    # –í–æ–¥–æ–ø–∞–¥–Ω–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞
    categories = ['–í—ã—Ä—É—á–∫–∞', '–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å', '–ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å', '–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥', '–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ', '–ü—Ä–∏–±—ã–ª—å']
    values = [
        selling_price,
        -data.get('total_cogs', 0),
        -data.get('marketplace_costs', 0),
        -data.get('marketing_costs', 0),
        -data.get('operational_costs', 0),
        unit_profit
    ]
    
    fig_waterfall = go.Figure(go.Waterfall(
        name="–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–∏–±—ã–ª–∏",
        orientation="v",
        measure=["relative", "relative", "relative", "relative", "relative", "total"],
        x=categories,
        textposition="outside",
        text=[f"{v:+,.0f}" for v in values],
        y=values,
        connector={"line": {"color": "rgb(63, 63, 63)"}},
    ))
    
    fig_waterfall.update_layout(
        title="–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–±—ã–ª–∏ —Å –µ–¥–∏–Ω–∏—Ü—ã —Ç–æ–≤–∞—Ä–∞",
        showlegend=False,
        xaxis_title="–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã",
        yaxis_title="–°—É–º–º–∞ (‚ÇΩ)"
    )
    
    st.plotly_chart(fig_waterfall, use_container_width=True)

def show_scenario_comparison(data):
    """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤"""
    st.subheader("üéØ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤")
    
    if 'scenarios' in data:
        scenarios = data['scenarios']
        
        # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        scenario_names = list(scenarios.keys())
        profits = [scenarios[name]['unit_profit'] for name in scenario_names]
        margins = [scenarios[name]['profit_margin'] for name in scenario_names]
        
        # –°—Ç–æ–ª–±—á–∞—Ç–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ –ø—Ä–∏–±—ã–ª–∏
        fig_scenarios = go.Figure()
        
        colors = ['red', 'blue', 'green']  # –ü–µ—Å—Å–∏–º–∏—Å—Ç–∏—á–Ω—ã–π, —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π, –æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω—ã–π
        
        for i, (name, profit) in enumerate(zip(scenario_names, profits)):
            fig_scenarios.add_trace(go.Bar(
                name=name,
                x=[name],
                y=[profit],
                text=[f"{profit:+,.0f} ‚ÇΩ"],
                textposition='auto',
                marker_color=colors[i % len(colors)],
                hovertemplate=f'<b>{name}</b><br>–ü—Ä–∏–±—ã–ª—å: %{{y:+,.0f}} ‚ÇΩ<br>–ú–∞—Ä–∂–∞: {margins[i]:.1f}%<extra></extra>'
            ))
        
        fig_scenarios.update_layout(
            title="–ü—Ä–∏–±—ã–ª—å –ø–æ —Å—Ü–µ–Ω–∞—Ä–∏—è–º",
            xaxis_title="–°—Ü–µ–Ω–∞—Ä–∏–π",
            yaxis_title="–ü—Ä–∏–±—ã–ª—å (‚ÇΩ)",
            showlegend=False
        )
        
        st.plotly_chart(fig_scenarios, use_container_width=True)
        
        # –¢–∞–±–ª–∏—Ü–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        monthly_volume = data.get('monthly_sales_volume', 100)
        
        comparison_data = []
        for name, result in scenarios.items():
            monthly_profit = result['unit_profit'] * monthly_volume
            comparison_data.append({
                '–°—Ü–µ–Ω–∞—Ä–∏–π': name,
                '–ü—Ä–∏–±—ã–ª—å/–µ–¥. (‚ÇΩ)': f"{result['unit_profit']:+,.0f}",
                '–ú–∞—Ä–∂–∞ (%)': f"{result['profit_margin']:.1f}%",
                '–ú–µ—Å—è—á–Ω–∞—è –ø—Ä–∏–±—ã–ª—å (‚ÇΩ)': f"{monthly_profit:+,.0f}"
            })
        
        df_comparison = pd.DataFrame(comparison_data)
        st.dataframe(df_comparison, use_container_width=True, hide_index=True)
    else:
        st.info("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö —ç—Ç–∞–ø–æ–≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞")

def show_benchmark_comparison(data):
    """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –æ—Ç—Ä–∞—Å–ª–µ–≤—ã–º–∏ –±–µ–Ω—á–º–∞—Ä–∫–∞–º–∏"""
    st.subheader("üìà –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å —Ä—ã–Ω–∫–æ–º")
    
    marketplace = data.get('marketplace', 'OZON')
    category = data.get('category', '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞')
    
    if marketplace in BENCHMARKS and category in BENCHMARKS[marketplace]:
        benchmark = get_category_benchmark(marketplace, category)
        
        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫
        current_margin = data.get('profit_margin', 0) / 100
        benchmark_margin = benchmark.get('avg_margin', 0.25)
        
        current_ltv_cac = data.get('ltv_cac_ratio', 0)
        benchmark_ltv_cac = benchmark.get('avg_ltv_cac', 3.0)
        
        # –†–∞–¥–∞—Ä–Ω–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞
        categories = ['–ú–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å', 'LTV/CAC', '–ö–æ–Ω–≤–µ—Ä—Å–∏—è*', '–í–æ–∑–≤—Ä–∞—Ç—ã*']
        
        current_values = [
            min(100, current_margin * 100),
            min(100, current_ltv_cac * 20),  # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
            data.get('conversion_rate', benchmark.get('avg_conversion', 0.025)) * 4000,  # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
            100 - (data.get('return_rate', benchmark.get('avg_return_rate', 0.12)) * 100)  # –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –ª—É—á—à–µ–π –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
        ]
        
        benchmark_values = [
            benchmark_margin * 100,
            benchmark_ltv_cac * 20,
            benchmark.get('avg_conversion', 0.025) * 4000,
            100 - (benchmark.get('avg_return_rate', 0.12) * 100)
        ]
        
        fig_radar = go.Figure()
        
        fig_radar.add_trace(go.Scatterpolar(
            r=current_values,
            theta=categories,
            fill='toself',
            name='–í–∞—à–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏',
            line_color='blue'
        ))
        
        fig_radar.add_trace(go.Scatterpolar(
            r=benchmark_values,
            theta=categories,
            fill='toself',
            name='–†—ã–Ω–æ—á–Ω—ã–µ –±–µ–Ω—á–º–∞—Ä–∫–∏',
            line_color='red',
            opacity=0.6
        ))
        
        fig_radar.update_layout(
            polar=dict(
                radialaxis=dict(
                    visible=True,
                    range=[0, 100]
                )),
            showlegend=True,
            title="–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å —Ä—ã–Ω–æ—á–Ω—ã–º–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º–∏"
        )
        
        st.plotly_chart(fig_radar, use_container_width=True)
        
        st.caption("*–ö–æ–Ω–≤–µ—Ä—Å–∏—è –∏ –≤–æ–∑–≤—Ä–∞—Ç—ã –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω—ã –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏")
        
        # –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
        col1, col2 = st.columns(2)
        
        with col1:
            st.write("**–í–∞—à–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:**")
            st.write(f"‚Ä¢ –ú–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å: {current_margin:.1%}")
            st.write(f"‚Ä¢ LTV/CAC: {current_ltv_cac:.1f}")
        
        with col2:
            st.write("**–†—ã–Ω–æ—á–Ω—ã–µ –±–µ–Ω—á–º–∞—Ä–∫–∏:**")
            st.write(f"‚Ä¢ –ú–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å: {benchmark_margin:.1%}")
            st.write(f"‚Ä¢ LTV/CAC: {benchmark_ltv_cac:.1f}")
    else:
        st.info("–ë–µ–Ω—á–º–∞—Ä–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")

def show_ltv_cac_analysis(data):
    """–ê–Ω–∞–ª–∏–∑ LTV/CAC"""
    st.subheader("üë• –ê–Ω–∞–ª–∏–∑ LTV/CAC")
    
    ltv = data.get('ltv', 0)
    cac = data.get('cac', 0)
    ltv_cac_ratio = data.get('ltv_cac_ratio', 0)
    payback_period = data.get('payback_period', 0)
    
    col1, col2 = st.columns(2)
    
    with col1:
        # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è LTV vs CAC
        fig_ltv_cac = go.Figure()
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ—á–∫—É —Ç–µ–∫—É—â–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        fig_ltv_cac.add_trace(go.Scatter(
            x=[cac],
            y=[ltv],
            mode='markers',
            marker=dict(size=20, color='blue'),
            name='–í–∞—à —Ç–æ–≤–∞—Ä',
            text=[f'LTV: {ltv:,.0f}‚ÇΩ<br>CAC: {cac:,.0f}‚ÇΩ<br>Ratio: {ltv_cac_ratio:.1f}'],
            hovertemplate='%{text}<extra></extra>'
        ))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–æ–Ω—ã —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        x_range = np.linspace(0, max(cac * 1.5, 1000), 100)
        
        # –ó–æ–Ω–∞ —É–±—ã—Ç–æ—á–Ω–æ—Å—Ç–∏ (LTV < CAC)
        fig_ltv_cac.add_trace(go.Scatter(
            x=x_range,
            y=x_range,
            mode='lines',
            line=dict(color='red', dash='dash'),
            name='–ó–æ–Ω–∞ —É–±—ã—Ç–æ—á–Ω–æ—Å—Ç–∏ (LTV=CAC)',
            hoverinfo='skip'
        ))
        
        # –ó–æ–Ω–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (LTV = 2*CAC)
        fig_ltv_cac.add_trace(go.Scatter(
            x=x_range,
            y=x_range * 2,
            mode='lines',
            line=dict(color='orange', dash='dash'),
            name='–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (2:1)',
            hoverinfo='skip'
        ))
        
        # –ó–æ–Ω–∞ —Ö–æ—Ä–æ—à–µ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (LTV = 3*CAC)
        fig_ltv_cac.add_trace(go.Scatter(
            x=x_range,
            y=x_range * 3,
            mode='lines',
            line=dict(color='green', dash='dash'),
            name='–•–æ—Ä–æ—à–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (3:1)',
            hoverinfo='skip'
        ))
        
        fig_ltv_cac.update_layout(
            title='–ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ LTV vs CAC',
            xaxis_title='CAC (‚ÇΩ)',
            yaxis_title='LTV (‚ÇΩ)',
            showlegend=True
        )
        
        st.plotly_chart(fig_ltv_cac, use_container_width=True)
    
    with col2:
        # –ú–µ—Ç—Ä–∏–∫–∏ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        st.write("#### üìä –û—Ü–µ–Ω–∫–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")
        
        if ltv_cac_ratio >= 5:
            st.success("üéØ –û—Ç–ª–∏—á–Ω–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (‚â•5:1)")
            st.write("‚Ä¢ –í—ã—Å–æ–∫–∏–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è")
            st.write("‚Ä¢ –ú–æ–∂–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞—Ç—å –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–π –±—é–¥–∂–µ—Ç")
        elif ltv_cac_ratio >= 3:
            st.success("‚úÖ –•–æ—Ä–æ—à–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (3-5:1)")
            st.write("‚Ä¢ –ó–¥–æ—Ä–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è")
            st.write("‚Ä¢ –£–º–µ—Ä–µ–Ω–Ω–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ")
        elif ltv_cac_ratio >= 2:
            st.warning("‚ö†Ô∏è –ü—Ä–∏–µ–º–ª–µ–º–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (2-3:1)")
            st.write("‚Ä¢ –¢—Ä–µ–±—É–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")
            st.write("‚Ä¢ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ")
        else:
            st.error("üî¥ –ù–∏–∑–∫–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (<2:1)")
            st.write("‚Ä¢ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è —Å–∏—Ç—É–∞—Ü–∏—è")
            st.write("‚Ä¢ –ù–µ–æ–±—Ö–æ–¥–∏–º–∞ —Å—Ä–æ—á–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è")
        
        st.metric("–ü–µ—Ä–∏–æ–¥ –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏", f"{payback_period:.1f} –º–µ—Å.")
        
        if payback_period <= 6:
            st.success("‚úÖ –ë—ã—Å—Ç—Ä–∞—è –æ–∫—É–ø–∞–µ–º–æ—Å—Ç—å")
        elif payback_period <= 12:
            st.warning("‚ö†Ô∏è –£–º–µ—Ä–µ–Ω–Ω–∞—è –æ–∫—É–ø–∞–µ–º–æ—Å—Ç—å")
        else:
            st.error("üî¥ –ú–µ–¥–ª–µ–Ω–Ω–∞—è –æ–∫—É–ø–∞–µ–º–æ—Å—Ç—å")

def show_profit_matrix(data):
    """P.R.O.F.I.T. –º–∞—Ç—Ä–∏—Ü–∞"""
    st.subheader("üéØ P.R.O.F.I.T. –ú–∞—Ç—Ä–∏—Ü–∞")
    
    calculator = UnitEconomicsCalculator()
    recommendations = calculator.generate_recommendations(data)
    profit_matrix = recommendations.get('profit_matrix', {})
    
    if profit_matrix:
        # –°–æ–∑–¥–∞–µ–º —Ä–∞–¥–∞—Ä–Ω—É—é –¥–∏–∞–≥—Ä–∞–º–º—É P.R.O.F.I.T.
        categories = list(profit_matrix.keys())
        values = list(profit_matrix.values())
        
        fig_profit = go.Figure()
        
        fig_profit.add_trace(go.Scatterpolar(
            r=values,
            theta=categories,
            fill='toself',
            name='–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ',
            line_color='blue'
        ))
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ü–µ–ª–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
        target_values = [85, 80, 75, 80, 70, 75]  # –¶–µ–ª–µ–≤—ã–µ –±–µ–Ω—á–º–∞—Ä–∫–∏
        fig_profit.add_trace(go.Scatterpolar(
            r=target_values,
            theta=categories,
            fill='toself',
            name='–¶–µ–ª–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏',
            line_color='green',
            opacity=0.3
        ))
        
        fig_profit.update_layout(
            polar=dict(
                radialaxis=dict(
                    visible=True,
                    range=[0, 100]
                )),
            showlegend=True,
            title="P.R.O.F.I.T. –ê–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –±–∏–∑–Ω–µ—Å–∞"
        )
        
        st.plotly_chart(fig_profit, use_container_width=True)
        
        # –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –∫–∞–∂–¥–æ–º—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—É
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.write("**P** - Profitability:")
            st.write(f"‚Ä¢ –û—Ü–µ–Ω–∫–∞: {profit_matrix.get('Profitability', 0):.0f}/100")
            
            st.write("**R** - Resource Optimization:")
            st.write(f"‚Ä¢ –û—Ü–µ–Ω–∫–∞: {profit_matrix.get('Resource Optimization', 0):.0f}/100")
        
        with col2:
            st.write("**O** - Operations Excellence:")
            st.write(f"‚Ä¢ –û—Ü–µ–Ω–∫–∞: {profit_matrix.get('Operations Excellence', 0):.0f}/100")
            
            st.write("**F** - Financial Intelligence:")
            st.write(f"‚Ä¢ –û—Ü–µ–Ω–∫–∞: {profit_matrix.get('Financial Intelligence', 0):.0f}/100")
        
        with col3:
            st.write("**I** - Intelligence Automation:")
            st.write(f"‚Ä¢ –û—Ü–µ–Ω–∫–∞: {profit_matrix.get('Intelligence Automation', 0):.0f}/100")
            
            st.write("**T** - Transformation Strategy:")
            st.write(f"‚Ä¢ –û—Ü–µ–Ω–∫–∞: {profit_matrix.get('Transformation Strategy', 0):.0f}/100")

def show_recommendations_summary(data):
    """–ö—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"""
    st.subheader("üí° –ö–ª—é—á–µ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
    
    calculator = UnitEconomicsCalculator()
    recommendations = calculator.generate_recommendations(data)
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.write("#### üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã")
        critical_issues = recommendations.get('critical_issues', [])
        if critical_issues:
            for issue in critical_issues[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3
                st.error(f"‚Ä¢ {issue}")
        else:
            st.success("‚úÖ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º –Ω–µ –≤—ã—è–≤–ª–µ–Ω–æ")
    
    with col2:
        st.write("#### ‚ö†Ô∏è –û–±–ª–∞—Å—Ç–∏ —É–ª—É—á—à–µ–Ω–∏—è")
        improvements = recommendations.get('improvements', [])
        if improvements:
            for improvement in improvements[:3]:
                st.warning(f"‚Ä¢ {improvement}")
        else:
            st.info("‚ÑπÔ∏è –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Ä–µ—à–µ–Ω—ã")
    
    with col3:
        st.write("#### ‚úÖ –°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã")
        strengths = recommendations.get('strengths', [])
        if strengths:
            for strength in strengths[:3]:
                st.success(f"‚Ä¢ {strength}")
        else:
            st.info("‚ÑπÔ∏è –ó–∞–≤–µ—Ä—à–∏—Ç–µ —Ä–∞—Å—á–µ—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
    
    # –û–±—â–∏–π —Å–∫–æ—Ä
    total_score = recommendations.get('total_score', 0)
    
    score_container = st.container()
    with score_container:
        st.write("#### üéØ –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ –±–∏–∑–Ω–µ—Å–∞")
        
        progress_col1, progress_col2 = st.columns([3, 1])
        
        with progress_col1:
            st.progress(total_score / 100)
        
        with progress_col2:
            st.metric("–°–∫–æ—Ä", f"{total_score}/100")
        
        if total_score >= 80:
            st.success("üéØ –û—Ç–ª–∏—á–Ω—ã–π –±–∏–∑–Ω–µ—Å! –ì–æ—Ç–æ–≤ –∫ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—é")
        elif total_score >= 60:
            st.warning("‚ö†Ô∏è –•–æ—Ä–æ—à–∏–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª, —Ç—Ä–µ–±—É–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")
        elif total_score >= 40:
            st.warning("‚ö†Ô∏è –°—Ä–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏, –Ω—É–∂–Ω—ã —É–ª—É—á—à–µ–Ω–∏—è")
        else:
            st.error("üî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã, —Ç—Ä–µ–±—É–µ—Ç –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏")
